// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: auction/auction/finalized_auction.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FinalizedAuction struct {
	Id         uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AuctionId  uint64     `protobuf:"varint,2,opt,name=auctionId,proto3" json:"auctionId,omitempty"`
	BidId      uint64     `protobuf:"varint,3,opt,name=bidId,proto3" json:"bidId,omitempty"`
	FinalPrice types.Coin `protobuf:"bytes,4,opt,name=finalPrice,proto3" json:"finalPrice"`
	Bidder     string     `protobuf:"bytes,5,opt,name=bidder,proto3" json:"bidder,omitempty"`
	Creator    string     `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *FinalizedAuction) Reset()         { *m = FinalizedAuction{} }
func (m *FinalizedAuction) String() string { return proto.CompactTextString(m) }
func (*FinalizedAuction) ProtoMessage()    {}
func (*FinalizedAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2fa7b34bef9222a, []int{0}
}
func (m *FinalizedAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinalizedAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinalizedAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FinalizedAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinalizedAuction.Merge(m, src)
}
func (m *FinalizedAuction) XXX_Size() int {
	return m.Size()
}
func (m *FinalizedAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_FinalizedAuction.DiscardUnknown(m)
}

var xxx_messageInfo_FinalizedAuction proto.InternalMessageInfo

func (m *FinalizedAuction) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FinalizedAuction) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

func (m *FinalizedAuction) GetBidId() uint64 {
	if m != nil {
		return m.BidId
	}
	return 0
}

func (m *FinalizedAuction) GetFinalPrice() types.Coin {
	if m != nil {
		return m.FinalPrice
	}
	return types.Coin{}
}

func (m *FinalizedAuction) GetBidder() string {
	if m != nil {
		return m.Bidder
	}
	return ""
}

func (m *FinalizedAuction) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*FinalizedAuction)(nil), "auction.auction.FinalizedAuction")
}

func init() {
	proto.RegisterFile("auction/auction/finalized_auction.proto", fileDescriptor_c2fa7b34bef9222a)
}

var fileDescriptor_c2fa7b34bef9222a = []byte{
	// 279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x50, 0x41, 0x4b, 0xf4, 0x30,
	0x14, 0x6c, 0xfa, 0x75, 0xfb, 0xb1, 0x11, 0x54, 0xc2, 0xa2, 0x71, 0x91, 0x58, 0xbc, 0xd8, 0x53,
	0x4b, 0xf5, 0x07, 0x88, 0x2b, 0x08, 0x7b, 0x93, 0x1e, 0xbd, 0x48, 0xdb, 0xc4, 0xe5, 0x81, 0xf6,
	0x2d, 0x6d, 0x14, 0xf5, 0x57, 0xf8, 0xb3, 0xd6, 0xdb, 0x1e, 0x3d, 0x89, 0xb4, 0x7f, 0x44, 0x36,
	0x4d, 0xd4, 0xd3, 0xcb, 0xcc, 0xe4, 0xbd, 0x19, 0x86, 0x9e, 0x14, 0x8f, 0x95, 0x06, 0xac, 0x53,
	0x37, 0xef, 0xa0, 0x2e, 0xee, 0xe1, 0x55, 0xc9, 0x5b, 0xcb, 0x24, 0xcb, 0x06, 0x35, 0xb2, 0x1d,
	0x07, 0xed, 0x9c, 0x4e, 0x16, 0xb8, 0x40, 0xa3, 0xa5, 0x9b, 0xd7, 0xf0, 0x6d, 0x2a, 0x2a, 0x6c,
	0x1f, 0xb0, 0x4d, 0xcb, 0xa2, 0x55, 0xe9, 0x53, 0x56, 0x2a, 0x5d, 0x64, 0x69, 0x85, 0x60, 0xcf,
	0x1c, 0xbf, 0x13, 0xba, 0x7b, 0xe5, 0x2c, 0x2e, 0x86, 0x53, 0x6c, 0x9b, 0xfa, 0x20, 0x39, 0x89,
	0x48, 0x1c, 0xe4, 0x3e, 0x48, 0x76, 0x48, 0xc7, 0xd6, 0x65, 0x2e, 0xb9, 0x6f, 0xe8, 0x5f, 0x82,
	0x4d, 0xe8, 0xa8, 0x04, 0x39, 0x97, 0xfc, 0x9f, 0x51, 0x06, 0xc0, 0xce, 0x29, 0x35, 0xd1, 0xaf,
	0x1b, 0xa8, 0x14, 0x0f, 0x22, 0x12, 0x6f, 0x9d, 0x1e, 0x24, 0x43, 0x9a, 0x64, 0x93, 0x26, 0xb1,
	0x69, 0x92, 0x4b, 0x84, 0x7a, 0x16, 0xac, 0x3e, 0x8f, 0xbc, 0xfc, 0xcf, 0x0a, 0xdb, 0xa3, 0x61,
	0x09, 0x52, 0xaa, 0x86, 0x8f, 0x22, 0x12, 0x8f, 0x73, 0x8b, 0x18, 0xa7, 0xff, 0xab, 0x46, 0x15,
	0x1a, 0x1b, 0x1e, 0x1a, 0xc1, 0xc1, 0x59, 0xb6, 0xea, 0x04, 0x59, 0x77, 0x82, 0x7c, 0x75, 0x82,
	0xbc, 0xf5, 0xc2, 0x5b, 0xf7, 0xc2, 0xfb, 0xe8, 0x85, 0x77, 0xb3, 0xef, 0xda, 0x7c, 0xfe, 0xe9,
	0x55, 0xbf, 0x2c, 0x55, 0x5b, 0x86, 0xa6, 0x85, 0xb3, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8e,
	0x74, 0xfb, 0xee, 0x77, 0x01, 0x00, 0x00,
}

func (m *FinalizedAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinalizedAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FinalizedAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintFinalizedAuction(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintFinalizedAuction(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.FinalPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFinalizedAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.BidId != 0 {
		i = encodeVarintFinalizedAuction(dAtA, i, uint64(m.BidId))
		i--
		dAtA[i] = 0x18
	}
	if m.AuctionId != 0 {
		i = encodeVarintFinalizedAuction(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintFinalizedAuction(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFinalizedAuction(dAtA []byte, offset int, v uint64) int {
	offset -= sovFinalizedAuction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FinalizedAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovFinalizedAuction(uint64(m.Id))
	}
	if m.AuctionId != 0 {
		n += 1 + sovFinalizedAuction(uint64(m.AuctionId))
	}
	if m.BidId != 0 {
		n += 1 + sovFinalizedAuction(uint64(m.BidId))
	}
	l = m.FinalPrice.Size()
	n += 1 + l + sovFinalizedAuction(uint64(l))
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovFinalizedAuction(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovFinalizedAuction(uint64(l))
	}
	return n
}

func sovFinalizedAuction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFinalizedAuction(x uint64) (n int) {
	return sovFinalizedAuction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FinalizedAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFinalizedAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinalizedAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinalizedAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinalizedAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinalizedAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidId", wireType)
			}
			m.BidId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinalizedAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BidId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinalizedAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFinalizedAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFinalizedAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FinalPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinalizedAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFinalizedAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFinalizedAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinalizedAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFinalizedAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFinalizedAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFinalizedAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFinalizedAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFinalizedAuction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFinalizedAuction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFinalizedAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFinalizedAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFinalizedAuction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFinalizedAuction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFinalizedAuction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFinalizedAuction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFinalizedAuction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFinalizedAuction = fmt.Errorf("proto: unexpected end of group")
)
