// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: auction/auction/auction.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Auction struct {
	Id                  uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	StartPrice          types.Coin `protobuf:"bytes,3,opt,name=startPrice,proto3" json:"startPrice"`
	Duration            uint64     `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	CreatedAt           uint64     `protobuf:"varint,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	CurrentHighestBidId uint64     `protobuf:"varint,6,opt,name=currentHighestBidId,proto3" json:"currentHighestBidId,omitempty"`
	HighestBidExists    bool       `protobuf:"varint,7,opt,name=highestBidExists,proto3" json:"highestBidExists,omitempty"`
	Ended               bool       `protobuf:"varint,8,opt,name=ended,proto3" json:"ended,omitempty"`
	Creator             string     `protobuf:"bytes,9,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Auction) Reset()         { *m = Auction{} }
func (m *Auction) String() string { return proto.CompactTextString(m) }
func (*Auction) ProtoMessage()    {}
func (*Auction) Descriptor() ([]byte, []int) {
	return fileDescriptor_028c42bd7eb07429, []int{0}
}
func (m *Auction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Auction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Auction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Auction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Auction.Merge(m, src)
}
func (m *Auction) XXX_Size() int {
	return m.Size()
}
func (m *Auction) XXX_DiscardUnknown() {
	xxx_messageInfo_Auction.DiscardUnknown(m)
}

var xxx_messageInfo_Auction proto.InternalMessageInfo

func (m *Auction) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Auction) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Auction) GetStartPrice() types.Coin {
	if m != nil {
		return m.StartPrice
	}
	return types.Coin{}
}

func (m *Auction) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Auction) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Auction) GetCurrentHighestBidId() uint64 {
	if m != nil {
		return m.CurrentHighestBidId
	}
	return 0
}

func (m *Auction) GetHighestBidExists() bool {
	if m != nil {
		return m.HighestBidExists
	}
	return false
}

func (m *Auction) GetEnded() bool {
	if m != nil {
		return m.Ended
	}
	return false
}

func (m *Auction) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*Auction)(nil), "auction.auction.Auction")
}

func init() { proto.RegisterFile("auction/auction/auction.proto", fileDescriptor_028c42bd7eb07429) }

var fileDescriptor_028c42bd7eb07429 = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xcf, 0x4a, 0x03, 0x31,
	0x10, 0xc6, 0x37, 0xeb, 0xf6, 0xdf, 0x08, 0x2a, 0xb1, 0x60, 0x2c, 0x1a, 0x17, 0x4f, 0x8b, 0x87,
	0x5d, 0xab, 0x0f, 0x20, 0xad, 0x08, 0x7a, 0x93, 0x3d, 0x7a, 0x4b, 0x93, 0xd0, 0xe6, 0xd0, 0x4d,
	0x49, 0x52, 0xa9, 0x6f, 0xe1, 0xd3, 0xf8, 0x0c, 0x3d, 0xf6, 0xe8, 0x49, 0xa4, 0x7d, 0x11, 0x69,
	0xb6, 0x5d, 0x45, 0x3d, 0xcd, 0x7c, 0x33, 0x5f, 0xe6, 0x17, 0x66, 0xe0, 0x94, 0x4d, 0xb9, 0x53,
	0xba, 0xc8, 0x7e, 0xc5, 0x74, 0x62, 0xb4, 0xd3, 0x78, 0x7f, 0x2b, 0x37, 0xb1, 0xd3, 0x1e, 0xea,
	0xa1, 0xf6, 0xbd, 0x6c, 0x9d, 0x95, 0xb6, 0x0e, 0xe5, 0xda, 0x8e, 0xb5, 0xcd, 0x06, 0xcc, 0xca,
	0xec, 0xb9, 0x3b, 0x90, 0x8e, 0x75, 0x33, 0xae, 0xd5, 0x66, 0xcc, 0xf9, 0x5b, 0x08, 0x8d, 0x5e,
	0x39, 0x01, 0xef, 0x41, 0xa8, 0x04, 0x41, 0x31, 0x4a, 0xa2, 0x3c, 0x54, 0x02, 0x63, 0x88, 0x0a,
	0x36, 0x96, 0x24, 0x8c, 0x51, 0xd2, 0xca, 0x7d, 0x8e, 0x6f, 0x00, 0xac, 0x63, 0xc6, 0x3d, 0x1a,
	0xc5, 0x25, 0xd9, 0x89, 0x51, 0xb2, 0x7b, 0x75, 0x9c, 0x96, 0x90, 0x74, 0x0d, 0x49, 0x37, 0x90,
	0xf4, 0x56, 0xab, 0xa2, 0x1f, 0xcd, 0x3f, 0xce, 0x82, 0xfc, 0xc7, 0x13, 0xdc, 0x81, 0xa6, 0x98,
	0x1a, 0xb6, 0x06, 0x92, 0xc8, 0xa3, 0x2a, 0x8d, 0x4f, 0xa0, 0xc5, 0x8d, 0x64, 0x4e, 0x8a, 0x9e,
	0x23, 0x35, 0xdf, 0xfc, 0x2e, 0xe0, 0x4b, 0x38, 0xe4, 0x53, 0x63, 0x64, 0xe1, 0xee, 0xd5, 0x70,
	0x24, 0xad, 0xeb, 0x2b, 0xf1, 0x20, 0x48, 0xdd, 0xfb, 0xfe, 0x6b, 0xe1, 0x0b, 0x38, 0x18, 0x55,
	0xfa, 0x6e, 0xa6, 0xac, 0xb3, 0xa4, 0x11, 0xa3, 0xa4, 0x99, 0xff, 0xa9, 0xe3, 0x36, 0xd4, 0x64,
	0x21, 0xa4, 0x20, 0x4d, 0x6f, 0x28, 0x05, 0x26, 0xd0, 0xf0, 0x1f, 0xd0, 0x86, 0xb4, 0xfc, 0x16,
	0xb6, 0xb2, 0xdf, 0x9d, 0x2f, 0x29, 0x5a, 0x2c, 0x29, 0xfa, 0x5c, 0x52, 0xf4, 0xba, 0xa2, 0xc1,
	0x62, 0x45, 0x83, 0xf7, 0x15, 0x0d, 0x9e, 0x8e, 0xb6, 0x07, 0x9b, 0x55, 0xa7, 0x73, 0x2f, 0x13,
	0x69, 0x07, 0x75, 0xbf, 0xf2, 0xeb, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3d, 0xc8, 0xda, 0x35,
	0xda, 0x01, 0x00, 0x00,
}

func (m *Auction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Auction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Auction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Ended {
		i--
		if m.Ended {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.HighestBidExists {
		i--
		if m.HighestBidExists {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.CurrentHighestBidId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.CurrentHighestBidId))
		i--
		dAtA[i] = 0x30
	}
	if m.CreatedAt != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x28
	}
	if m.Duration != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.StartPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuction(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Auction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAuction(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	l = m.StartPrice.Size()
	n += 1 + l + sovAuction(uint64(l))
	if m.Duration != 0 {
		n += 1 + sovAuction(uint64(m.Duration))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovAuction(uint64(m.CreatedAt))
	}
	if m.CurrentHighestBidId != 0 {
		n += 1 + sovAuction(uint64(m.CurrentHighestBidId))
	}
	if m.HighestBidExists {
		n += 2
	}
	if m.Ended {
		n += 2
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	return n
}

func sovAuction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuction(x uint64) (n int) {
	return sovAuction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Auction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Auction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Auction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StartPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentHighestBidId", wireType)
			}
			m.CurrentHighestBidId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentHighestBidId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighestBidExists", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HighestBidExists = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ended", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ended = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuction = fmt.Errorf("proto: unexpected end of group")
)
